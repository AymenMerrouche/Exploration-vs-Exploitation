import puissance4
import numpy as np
import random
import matplotlib.pyplot as plt
import sys


def testPartieConnect4(s):
    # initialisations
    if s == 1:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentAleatoire()
        label = "Aleatoire vs Aleatoire"
        l1 = "Aleatoire"
        l2 = "Aleatoire"
    elif s == 2:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "Aleatoire vs MonteCarlo"
        l1 = "Aleatoire"
        l2 = "MonteCarlo"
    elif s == 3:
        joueur1 = puissance4.AgentMonteCarlo()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "MonteCarlo vs MonteCarlo"
        l1 = "MonteCarlo"
        l2 = "MonteCarlo"
    elif s == 4:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentUCT()
        label = "Aleatoire vs UCT"
        l1 = "Aleatoire"
        l2 = "UCT"
    elif s == 5:
        joueur1 = puissance4.AgentUCT()
        Joueur2 = puissance4.AgentUCT()
        label = "UCT vs UCT"
        l1 = "UCT"
        l2 = "UCT"
    elif s == 6:
        joueur1 = puissance4.AgentUCT()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "UCT vs MonteCarlo"
        l1 = "UCT"
        l2 = "MonteCarlo"
    else:
        print("erreur : pas d'autres combinaisons de joueurs !")
    print(label)
    grid = [[0]*7]*6
    grid = np.array(grid)
    state = puissance4.Connect4State(grid, random.choice([1, -1]))
    jeu = puissance4.Jeu(state, joueur1, Joueur2)
    res = jeu.run(True, 0.5)
    if res[0] == 1:
        print("victoire de :", l1)
    elif res[0] == -1:
        print("victoire de :", l2)
    else:
        print("match nul")
# s : le type du duel
# s=1 : aleatoire vs aleatoire
# s=2 : aleatoire vs monte carlo
# s=3 : monte carlo vs monte carlo
# s=4 : UCT vs aleatoire
# s=5 : UCT vs UCT
# s=6 : UCT vs MonteCarlo

####################################################################################################################################
# simuler pour un tres grand nombre de parties de morpion les diferrentes strategies
# s : la strategies
# inf et sup : bornes pour le nombre de partie a donner pour l'algorithme


def simulation(s, inf, sup):
    # initialisations
    if s == 1:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentAleatoire()
        label = "Aleatoire vs Aleatoire"
        l1 = "Aleatoire"
        l2 = "Aleatoire"
    elif s == 2:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "Aleatoire vs MonteCarlo"
        l1 = "Aleatoire"
        l2 = "MonteCarlo"
    elif s == 3:
        joueur1 = puissance4.AgentMonteCarlo()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "MonteCarlo vs MonteCarlo"
        l1 = "MonteCarlo"
        l2 = "MonteCarlo"
    elif s == 4:
        joueur1 = puissance4.AgentAleatoire()
        Joueur2 = puissance4.AgentUCT()
        label = "Aleatoire vs UCT"
        l1 = "Aleatoire"
        l2 = "UCT"
    elif s == 5:
        joueur1 = puissance4.AgentUCT()
        Joueur2 = puissance4.AgentUCT()
        label = "UCT vs UCT"
        l1 = "UCT"
        l2 = "UCT"
    elif s == 6:
        joueur1 = puissance4.AgentUCT()
        Joueur2 = puissance4.AgentMonteCarlo()
        label = "UCT vs MonteCarlo"
        l1 = "UCT"
        l2 = "MonteCarlo"
    else:
        print("erreur : pas d'autres combinaisons de joueurs !")
    grid = [[0]*7]*6
    grid = np.array(grid)
    state = puissance4.Connect4State(grid, random.choice([1, -1]))
    j1 = []
    j2 = []
    nul = []
    sum1 = 0
    sum2 = 0
    sum3 = 0
    temps = []
    for j in range(inf, sup):
        for i in range(j):
            print("************* Partie : ", i, " *****************")
            jeu = puissance4.Jeu(state, joueur1, Joueur2)
            res = jeu.run(False, sys.float_info.min)
            if (res[0] == 1):  # joueur 1 a gagne
                sum1 += 1
            elif (res[0] == -1):  # joueur 2 a gagne
                sum2 += 1
            else:
                sum3 += 1
            # reinitialisation
            grid = [[0]*7]*6
            grid = np.array(grid)
            state = puissance4.Connect4State(grid, random.choice([1, -1]))
        j1.append(sum1 / j)
        j2.append(sum2 / j)
        nul.append(sum3 / j)
        temps.append(j)
        sum1 = 0
        sum2 = 0
        sum3 = 0
    # dessiner les courbes
    p1, = plt.plot(temps, j1)
    p2, = plt.plot(temps, j2)
    p3, = plt.plot(temps, nul)
    plt.xlabel("nombre de parties")
    plt.ylabel("Moyenne des gains")
    plt.title(label + " - Connect4")
    plt.legend([p1, p2, p3], ["moyenne des gains du joueur 1 " + l1,
                              "Moyenne des gains du joueur 2 " + l2, "Moyenne des nuls"])
    label2 = "nombre total de parties jouees : " + str(inf*sup)
    plt.text(inf, 0.002, label2)
    plt.show()
