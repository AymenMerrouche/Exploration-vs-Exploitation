import bandits_manchots as bm

'''
# test gain binaire
print("*******************************\n")
print("test gainBinaire \n")
machine = [x / 100 for x in range(1, 101)]
print(machine)
results = [bm.gainBinaire(machine, i) for i in range(0, 100)]
print(results)
print("*******************************\n")
# test aleatoire
print("*******************************\n")
print("test aleatoire \n")
gains = [0.45, 0.46, 0.49, 0.98, 0.67, 0.23, 0.78, 0.11]
nbres = [3, 4, 2, 1, 5, 8, 9, 3]
for i in range(30):
    print(bm.aleatoire(gains, nbres))
print("*******************************\n")
# test greedy
print("*******************************\n")
print("test greedy \n")
for i in range(len(gains)):
    print("a l'indice", i, "se trouve", gains[i])
    print(bm.greedy(gains, nbres))
print("*******************************\n")
# test Egreedy
print("*******************************\n")
print("test Egreedy \n")
for i in range(len(gains)):
    print("a l'indice", i, "se trouve", gains[i])
    print(bm.Egreedy(gains, nbres))
print("*******************************\n")
# test UCB
print("*******************************\n")
print("test ucb \n")
print(bm.ucb(gains, nbres))
print("*******************************\n")
'''
# test simulation
print("*******************************\n")
print("test simulation \n")
#bm.simulation(10000, 1000, 4, 0)
print("*******************************\n")

# test comparaison entre les differentes strategies selon le nombre de parties
#bm.comparaison_nombre_de_parties(10000, 1000, 0)

# test comparaison entre les differentes strategies selon le nombre de leviers
bm.comparaison_nombre_de_leviers(100, 500, 200, 100)
