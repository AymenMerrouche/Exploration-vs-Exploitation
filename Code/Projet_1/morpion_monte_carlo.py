import tictactoe
import numpy as np
import random
import matplotlib.pyplot as plt
import sys

# s : le type du duel
# s=1 : aleatoire vs aleatoire
# s=2 : aleatoire vs monte carlo
# s=3 : monte carlo vs monte carlo
# s=4 : UCT vs aleatoire
# s=5 : UCT vs UCT
# s=6 : UCT vs MonteCarlo

####################################################################################################################################
# simuler pour un tres grand nombre de parties de morpion les diferrentes strategies
# s : la strategies
# inf et sup : bornes pour le nombre de partie a donner pour l'algorithme


def simulation(s, inf, sup):
    # initialisations
    if s == 1:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentAleatoire()
        label = "Aleatoire vs Aleatoire"
        l1 = "Aleatoire"
        l2 = "Aleatoire"
    elif s == 2:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "Aleatoire vs MonteCarlo"
        l1 = "Aleatoire"
        l2 = "MonteCarlo"
    elif s == 3:
        joueur1 = tictactoe.AgentMonteCarlo()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "MonteCarlo vs MonteCarlo"
        l1 = "MonteCarlo"
        l2 = "MonteCarlo"
    elif s == 4:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentUCT()
        label = "Aleatoire vs UCT"
        l1 = "Aleatoire"
        l2 = "UCT"
    elif s == 5:
        joueur1 = tictactoe.AgentUCT()
        Joueur2 = tictactoe.AgentUCT()
        label = "UCT vs UCT"
        l1 = "UCT"
        l2 = "UCT"
    elif s == 6:
        joueur1 = tictactoe.AgentUCT()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "UCT vs MonteCarlo"
        l1 = "UCT"
        l2 = "MonteCarlo"
    else:
        print("erreur : pas d'autres combinaisons de joueurs !")
    grid = [[0]*3]*3
    grid = np.array(grid)
    state = tictactoe.MorpionState(grid, random.choice([1, -1]))
    j1 = []
    j2 = []
    nul = []
    sum1 = 0
    sum2 = 0
    sum3 = 0
    temps = []
    bernoulli1 = []
    p = 0
    var = 0
    for j in range(inf, sup):
        bernoulli1 = []
        p = 0
        var = 0
        for i in range(j):
            print("************* Partie : ", i, " *****************")
            jeu = tictactoe.Jeu(state, joueur1, Joueur2)
            res = jeu.run(False, sys.float_info.min)
            if (res[0] == 1):  # joueur 1 a gagne
                sum1 += 1
                bernoulli1.append(1)
            elif (res[0] == -1):  # joueur 2 a gagne
                bernoulli1.append(0)
                sum2 += 1
            else:
                bernoulli1.append(0)
                sum3 += 1
            # reinitialisation
            grid = [[0]*3]*3
            grid = np.array(grid)
            state = tictactoe.MorpionState(grid, random.choice([1, -1]))
        j1.append(sum1 / j)
        j2.append(sum2 / j)
        nul.append(sum3 / j)
        print("pour ", i, " parties")
        bernoulli1 = np.array(bernoulli1)
        p = sum(bernoulli1) / len(bernoulli1)
        print("p = ", p)
        bernoulli1 = bernoulli1 - p
        for k in range(len(bernoulli1)):
            bernoulli1[k] = bernoulli1[k] ** 2
        var = sum(bernoulli1) / len(bernoulli1)
        print("var = ", var)
        temps.append(j)
        sum1 = 0
        sum2 = 0
        sum3 = 0
    # dessiner les courbes
    p1, = plt.plot(temps, j1)
    p2, = plt.plot(temps, j2)
    p3, = plt.plot(temps, nul)
    plt.xlabel("nombre de parties")
    plt.ylabel("Moyenne des gains")
    plt.title(label + " - Morpion")
    plt.legend([p1, p2, p3], ["moyenne des gains du joueur 1 " + l1,
                              "Moyenne des gains du joueur 2 " + l2, "Moyenne des nuls"])
    label2 = "nombre total de parties jouees : " + str(inf*sup)
    plt.text(inf, 0.3, label2)
    plt.show()


########################################################################################################################################
# simulation de la variable G qui denote le nombre de victoires d'un joueur au bout de N parties
# s : la strategies
# n : le nombre de parties

def simulation_G(s, n):
    # initialisations
    if s == 1:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentAleatoire()
        label = "Aleatoire vs Aleatoire"
        l1 = "Aleatoire"
        l2 = "Aleatoire"
    elif s == 2:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "Aleatoire vs MonteCarlo"
        l1 = "Aleatoire"
        l2 = "MonteCarlo"
    elif s == 3:
        joueur1 = tictactoe.AgentMonteCarlo()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "MonteCarlo vs MonteCarlo"
        l1 = "MonteCarlo"
        l2 = "MonteCarlo"
    elif s == 4:
        joueur1 = tictactoe.AgentAleatoire()
        Joueur2 = tictactoe.AgentUCT()
        label = "Aleatoire vs UCT"
        l1 = "Aleatoire"
        l2 = "UCT"
    elif s == 5:
        joueur1 = tictactoe.AgentUCT()
        Joueur2 = tictactoe.AgentUCT()
        label = "UCT vs UCT"
        l1 = "UCT"
        l2 = "UCT"
    elif s == 6:
        joueur1 = tictactoe.AgentUCT()
        Joueur2 = tictactoe.AgentMonteCarlo()
        label = "UCT vs MonteCarlo"
        l1 = "UCT"
        l2 = "MonteCarlo"
    else:
        print("erreur : pas d'autres combinaisons de joueurs !")
    # initalisations
    grid = [[0]*3]*3
    grid = np.array(grid)
    state = tictactoe.MorpionState(grid, random.choice([1, -1]))
    j1 = []
    j2 = []
    nul = []
    sum1 = 0
    sum2 = 0
    sum3 = 0
    temps = []
    binomial = []
    p = 0
    var = 0
    for j in range(1, 201):
        for i in range(1, n):
            print("************* Partie : ", i, " *****************")
            jeu = tictactoe.Jeu(state, joueur1, Joueur2)
            res = jeu.run(False, sys.float_info.min)
            if (res[0] == 1):  # joueur 1 a gagne
                sum1 += 1
            elif (res[0] == -1):  # joueur 2 a gagne
                sum2 += 1
            else:
                sum3 += 1
            # reinitialisation
            grid = [[0]*3]*3
            grid = np.array(grid)
            state = tictactoe.MorpionState(grid, random.choice([1, -1]))
        j1.append(sum1 / j)
        j2.append(sum2 / j)
        nul.append(sum3 / j)
        binomial.append(sum1)
        temps.append(j)
        sum1 = 0
        sum2 = 0
        sum3 = 0
    # on calcule la variance en utilisant l'estimateur d'esperance et de variance
    print("apres ", j, " parties")
    p = sum(binomial) / len(binomial)
    print("p = ", p)
    binomial = np.array(binomial)
    binomial = binomial - p
    for k in range(len(binomial)):
        binomial[k] = binomial[k] ** 2
    var = sum(binomial) / len(binomial)
    print("var :", var)
    # dessiner les courbes
    p1, = plt.plot(temps, j1)
    p2, = plt.plot(temps, j2)
    p3, = plt.plot(temps, nul)
    plt.xlabel("nombre de parties")
    plt.ylabel("Moyenne des gains")
    plt.title(label + " - Morpion")
    plt.legend([p1, p2, p3], ["moyenne des gains du joueur 1 " + l1,
                              "Moyenne des gains du joueur 2 " + l2, "Moyenne des nuls"])
    label2 = "nombre total de parties jouees : " + str(inf*sup)
    plt.text(inf, 0.3, label2)
    plt.show()
